# Disjoint Set (Union-Find) implementation for cycle detection
class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}
        self.rank = {v: 0 for v in vertices}

    def find(self, v):
        if self.parent[v] != v:
            self.parent[v] = self.find(self.parent[v])  # Path compression
        return self.parent[v]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u == root_v:
            return False  # Cycle

        if self.rank[root_u] < self.rank[root_v]:
            self.parent[root_u] = root_v
        elif self.rank[root_u] > self.rank[root_v]:
            self.parent[root_v] = root_u
        else:
            self.parent[root_v] = root_u
            self.rank[root_u] += 1

        return True
def kruskal_mst(vertices, edges):
    # Sort all edges by weight
    edges.sort(key=lambda edge: edge[2])
    ds = DisjointSet(vertices)

    mst = []
    total_cost = 0

    for u, v, weight in edges:
        if ds.union(u, v):  # If it connects two disjoint sets
            mst.append((u, v, weight))
            total_cost += weight

        if len(mst) == len(vertices) - 1:
            break

    return mst, total_cost
vertices = set()
edges = []

n = int(input("Enter number of edges: "))
print("Enter each edge in format: vertex1 vertex2 weight")

for _ in range(n):
    u, v, w = input().split()
    w = int(w)
    vertices.update([u, v])
    edges.append((u, v, w))

mst, cost = kruskal_mst(vertices, edges)

print("\nMinimum Spanning Tree edges:")
for u, v, w in mst:
    print(f"{u} - {v} : {w}")
print("Total cost of MST:", cost)
