def solve_n_queens(n):
    solutions = []
    board = [-1] * n  # board[i] = column position of queen in row i

    # Sets to track used columns and diagonals
    cols = set()
    pos_diagonals = set()  # (r + c)
    neg_diagonals = set()  # (r - c)

    def is_safe(row, col):
        return col not in cols and (row + col) not in pos_diagonals and (row - col) not in neg_diagonals

    def backtrack(row):
        if row == n:
            solutions.append(board[:])  # Deep copy of the board
            return

        for col in range(n):
            if is_safe(row, col):
                board[row] = col
                cols.add(col)
                pos_diagonals.add(row + col)
                neg_diagonals.add(row - col)

                backtrack(row + 1)

                # Backtrack: Remove queen
                cols.remove(col)
                pos_diagonals.remove(row + col)
                neg_diagonals.remove(row - col)
                board[row] = -1

    backtrack(0)
    return solutions

# Function to display the solution
def print_solutions(solutions, n):
    for sol in solutions:
        print("Solution:")
        for i in range(n):
            row = ['.'] * n
            row[sol[i]] = 'Q'
            print(' '.join(row))
        print("\n" + "-"*20 + "\n")

# Example usage
n = int(input("Enter value of N for N-Queens: "))
solutions = solve_n_queens(n)
print(f"\nTotal solutions found: {len(solutions)}\n")
print_solutions(solutions, n)
